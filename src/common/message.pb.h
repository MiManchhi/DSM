// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace network {
class ClientKeyNegotiationRequest;
class ClientKeyNegotiationRequestDefaultTypeInternal;
extern ClientKeyNegotiationRequestDefaultTypeInternal _ClientKeyNegotiationRequest_default_instance_;
class ClientPublicKeyRegisterRequest;
class ClientPublicKeyRegisterRequestDefaultTypeInternal;
extern ClientPublicKeyRegisterRequestDefaultTypeInternal _ClientPublicKeyRegisterRequest_default_instance_;
class KeyNegotiationResponse;
class KeyNegotiationResponseDefaultTypeInternal;
extern KeyNegotiationResponseDefaultTypeInternal _KeyNegotiationResponse_default_instance_;
class ServerKeyNegotiationRequest;
class ServerKeyNegotiationRequestDefaultTypeInternal;
extern ServerKeyNegotiationRequestDefaultTypeInternal _ServerKeyNegotiationRequest_default_instance_;
class ServerPublicKeyRegisterRequest;
class ServerPublicKeyRegisterRequestDefaultTypeInternal;
extern ServerPublicKeyRegisterRequestDefaultTypeInternal _ServerPublicKeyRegisterRequest_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::ClientKeyNegotiationRequest* Arena::CreateMaybeMessage<::network::ClientKeyNegotiationRequest>(Arena*);
template<> ::network::ClientPublicKeyRegisterRequest* Arena::CreateMaybeMessage<::network::ClientPublicKeyRegisterRequest>(Arena*);
template<> ::network::KeyNegotiationResponse* Arena::CreateMaybeMessage<::network::KeyNegotiationResponse>(Arena*);
template<> ::network::ServerKeyNegotiationRequest* Arena::CreateMaybeMessage<::network::ServerKeyNegotiationRequest>(Arena*);
template<> ::network::ServerPublicKeyRegisterRequest* Arena::CreateMaybeMessage<::network::ServerPublicKeyRegisterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class ClientPublicKeyRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.ClientPublicKeyRegisterRequest) */ {
 public:
  ClientPublicKeyRegisterRequest();
  virtual ~ClientPublicKeyRegisterRequest();

  ClientPublicKeyRegisterRequest(const ClientPublicKeyRegisterRequest& from);
  ClientPublicKeyRegisterRequest(ClientPublicKeyRegisterRequest&& from) noexcept
    : ClientPublicKeyRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ClientPublicKeyRegisterRequest& operator=(const ClientPublicKeyRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPublicKeyRegisterRequest& operator=(ClientPublicKeyRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPublicKeyRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPublicKeyRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ClientPublicKeyRegisterRequest*>(
               &_ClientPublicKeyRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientPublicKeyRegisterRequest* other);
  friend void swap(ClientPublicKeyRegisterRequest& a, ClientPublicKeyRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientPublicKeyRegisterRequest* New() const final {
    return CreateMaybeMessage<ClientPublicKeyRegisterRequest>(nullptr);
  }

  ClientPublicKeyRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPublicKeyRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPublicKeyRegisterRequest& from);
  void MergeFrom(const ClientPublicKeyRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPublicKeyRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.ClientPublicKeyRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // bytes public_key = 4;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // bytes signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // int32 public_key_length = 3;
  void clear_public_key_length();
  static const int kPublicKeyLengthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_length() const;
  void set_public_key_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:network.ClientPublicKeyRegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerPublicKeyRegisterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.ServerPublicKeyRegisterRequest) */ {
 public:
  ServerPublicKeyRegisterRequest();
  virtual ~ServerPublicKeyRegisterRequest();

  ServerPublicKeyRegisterRequest(const ServerPublicKeyRegisterRequest& from);
  ServerPublicKeyRegisterRequest(ServerPublicKeyRegisterRequest&& from) noexcept
    : ServerPublicKeyRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ServerPublicKeyRegisterRequest& operator=(const ServerPublicKeyRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPublicKeyRegisterRequest& operator=(ServerPublicKeyRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerPublicKeyRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerPublicKeyRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ServerPublicKeyRegisterRequest*>(
               &_ServerPublicKeyRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerPublicKeyRegisterRequest* other);
  friend void swap(ServerPublicKeyRegisterRequest& a, ServerPublicKeyRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerPublicKeyRegisterRequest* New() const final {
    return CreateMaybeMessage<ServerPublicKeyRegisterRequest>(nullptr);
  }

  ServerPublicKeyRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerPublicKeyRegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerPublicKeyRegisterRequest& from);
  void MergeFrom(const ServerPublicKeyRegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPublicKeyRegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.ServerPublicKeyRegisterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);

  // bytes public_key = 4;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 4;
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // bytes signature = 5;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // int32 public_key_length = 3;
  void clear_public_key_length();
  static const int kPublicKeyLengthFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_length() const;
  void set_public_key_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:network.ServerPublicKeyRegisterRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int32 public_key_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class KeyNegotiationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.KeyNegotiationResponse) */ {
 public:
  KeyNegotiationResponse();
  virtual ~KeyNegotiationResponse();

  KeyNegotiationResponse(const KeyNegotiationResponse& from);
  KeyNegotiationResponse(KeyNegotiationResponse&& from) noexcept
    : KeyNegotiationResponse() {
    *this = ::std::move(from);
  }

  inline KeyNegotiationResponse& operator=(const KeyNegotiationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyNegotiationResponse& operator=(KeyNegotiationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyNegotiationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyNegotiationResponse* internal_default_instance() {
    return reinterpret_cast<const KeyNegotiationResponse*>(
               &_KeyNegotiationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KeyNegotiationResponse* other);
  friend void swap(KeyNegotiationResponse& a, KeyNegotiationResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyNegotiationResponse* New() const final {
    return CreateMaybeMessage<KeyNegotiationResponse>(nullptr);
  }

  KeyNegotiationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyNegotiationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyNegotiationResponse& from);
  void MergeFrom(const KeyNegotiationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyNegotiationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.KeyNegotiationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // int32 key_length = 1;
  void clear_key_length();
  static const int kKeyLengthFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 key_length() const;
  void set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:network.KeyNegotiationResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ClientKeyNegotiationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.ClientKeyNegotiationRequest) */ {
 public:
  ClientKeyNegotiationRequest();
  virtual ~ClientKeyNegotiationRequest();

  ClientKeyNegotiationRequest(const ClientKeyNegotiationRequest& from);
  ClientKeyNegotiationRequest(ClientKeyNegotiationRequest&& from) noexcept
    : ClientKeyNegotiationRequest() {
    *this = ::std::move(from);
  }

  inline ClientKeyNegotiationRequest& operator=(const ClientKeyNegotiationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientKeyNegotiationRequest& operator=(ClientKeyNegotiationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientKeyNegotiationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientKeyNegotiationRequest* internal_default_instance() {
    return reinterpret_cast<const ClientKeyNegotiationRequest*>(
               &_ClientKeyNegotiationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientKeyNegotiationRequest* other);
  friend void swap(ClientKeyNegotiationRequest& a, ClientKeyNegotiationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientKeyNegotiationRequest* New() const final {
    return CreateMaybeMessage<ClientKeyNegotiationRequest>(nullptr);
  }

  ClientKeyNegotiationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientKeyNegotiationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientKeyNegotiationRequest& from);
  void MergeFrom(const ClientKeyNegotiationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientKeyNegotiationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.ClientKeyNegotiationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // @@protoc_insertion_point(class_scope:network.ClientKeyNegotiationRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ServerKeyNegotiationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.ServerKeyNegotiationRequest) */ {
 public:
  ServerKeyNegotiationRequest();
  virtual ~ServerKeyNegotiationRequest();

  ServerKeyNegotiationRequest(const ServerKeyNegotiationRequest& from);
  ServerKeyNegotiationRequest(ServerKeyNegotiationRequest&& from) noexcept
    : ServerKeyNegotiationRequest() {
    *this = ::std::move(from);
  }

  inline ServerKeyNegotiationRequest& operator=(const ServerKeyNegotiationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerKeyNegotiationRequest& operator=(ServerKeyNegotiationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerKeyNegotiationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerKeyNegotiationRequest* internal_default_instance() {
    return reinterpret_cast<const ServerKeyNegotiationRequest*>(
               &_ServerKeyNegotiationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServerKeyNegotiationRequest* other);
  friend void swap(ServerKeyNegotiationRequest& a, ServerKeyNegotiationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerKeyNegotiationRequest* New() const final {
    return CreateMaybeMessage<ServerKeyNegotiationRequest>(nullptr);
  }

  ServerKeyNegotiationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerKeyNegotiationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerKeyNegotiationRequest& from);
  void MergeFrom(const ServerKeyNegotiationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerKeyNegotiationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.ServerKeyNegotiationRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // string server_id = 2;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);

  // @@protoc_insertion_point(class_scope:network.ServerKeyNegotiationRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientPublicKeyRegisterRequest

// string app_id = 1;
inline void ClientPublicKeyRegisterRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPublicKeyRegisterRequest::app_id() const {
  // @@protoc_insertion_point(field_get:network.ClientPublicKeyRegisterRequest.app_id)
  return app_id_.GetNoArena();
}
inline void ClientPublicKeyRegisterRequest::set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientPublicKeyRegisterRequest.app_id)
}
inline void ClientPublicKeyRegisterRequest::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientPublicKeyRegisterRequest.app_id)
}
inline void ClientPublicKeyRegisterRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientPublicKeyRegisterRequest.app_id)
}
inline void ClientPublicKeyRegisterRequest::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientPublicKeyRegisterRequest.app_id)
}
inline std::string* ClientPublicKeyRegisterRequest::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientPublicKeyRegisterRequest.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPublicKeyRegisterRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:network.ClientPublicKeyRegisterRequest.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPublicKeyRegisterRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:network.ClientPublicKeyRegisterRequest.app_id)
}

// string user_id = 2;
inline void ClientPublicKeyRegisterRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPublicKeyRegisterRequest::user_id() const {
  // @@protoc_insertion_point(field_get:network.ClientPublicKeyRegisterRequest.user_id)
  return user_id_.GetNoArena();
}
inline void ClientPublicKeyRegisterRequest::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientPublicKeyRegisterRequest.user_id)
}
inline void ClientPublicKeyRegisterRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientPublicKeyRegisterRequest.user_id)
}
inline void ClientPublicKeyRegisterRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientPublicKeyRegisterRequest.user_id)
}
inline void ClientPublicKeyRegisterRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientPublicKeyRegisterRequest.user_id)
}
inline std::string* ClientPublicKeyRegisterRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientPublicKeyRegisterRequest.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPublicKeyRegisterRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:network.ClientPublicKeyRegisterRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPublicKeyRegisterRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:network.ClientPublicKeyRegisterRequest.user_id)
}

// int32 public_key_length = 3;
inline void ClientPublicKeyRegisterRequest::clear_public_key_length() {
  public_key_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPublicKeyRegisterRequest::public_key_length() const {
  // @@protoc_insertion_point(field_get:network.ClientPublicKeyRegisterRequest.public_key_length)
  return public_key_length_;
}
inline void ClientPublicKeyRegisterRequest::set_public_key_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_key_length_ = value;
  // @@protoc_insertion_point(field_set:network.ClientPublicKeyRegisterRequest.public_key_length)
}

// bytes public_key = 4;
inline void ClientPublicKeyRegisterRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPublicKeyRegisterRequest::public_key() const {
  // @@protoc_insertion_point(field_get:network.ClientPublicKeyRegisterRequest.public_key)
  return public_key_.GetNoArena();
}
inline void ClientPublicKeyRegisterRequest::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientPublicKeyRegisterRequest.public_key)
}
inline void ClientPublicKeyRegisterRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientPublicKeyRegisterRequest.public_key)
}
inline void ClientPublicKeyRegisterRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientPublicKeyRegisterRequest.public_key)
}
inline void ClientPublicKeyRegisterRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientPublicKeyRegisterRequest.public_key)
}
inline std::string* ClientPublicKeyRegisterRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientPublicKeyRegisterRequest.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPublicKeyRegisterRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:network.ClientPublicKeyRegisterRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPublicKeyRegisterRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:network.ClientPublicKeyRegisterRequest.public_key)
}

// bytes signature = 5;
inline void ClientPublicKeyRegisterRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientPublicKeyRegisterRequest::signature() const {
  // @@protoc_insertion_point(field_get:network.ClientPublicKeyRegisterRequest.signature)
  return signature_.GetNoArena();
}
inline void ClientPublicKeyRegisterRequest::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientPublicKeyRegisterRequest.signature)
}
inline void ClientPublicKeyRegisterRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientPublicKeyRegisterRequest.signature)
}
inline void ClientPublicKeyRegisterRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientPublicKeyRegisterRequest.signature)
}
inline void ClientPublicKeyRegisterRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientPublicKeyRegisterRequest.signature)
}
inline std::string* ClientPublicKeyRegisterRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientPublicKeyRegisterRequest.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientPublicKeyRegisterRequest::release_signature() {
  // @@protoc_insertion_point(field_release:network.ClientPublicKeyRegisterRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientPublicKeyRegisterRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:network.ClientPublicKeyRegisterRequest.signature)
}

// -------------------------------------------------------------------

// ServerPublicKeyRegisterRequest

// string app_id = 1;
inline void ServerPublicKeyRegisterRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerPublicKeyRegisterRequest::app_id() const {
  // @@protoc_insertion_point(field_get:network.ServerPublicKeyRegisterRequest.app_id)
  return app_id_.GetNoArena();
}
inline void ServerPublicKeyRegisterRequest::set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerPublicKeyRegisterRequest.app_id)
}
inline void ServerPublicKeyRegisterRequest::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerPublicKeyRegisterRequest.app_id)
}
inline void ServerPublicKeyRegisterRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerPublicKeyRegisterRequest.app_id)
}
inline void ServerPublicKeyRegisterRequest::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerPublicKeyRegisterRequest.app_id)
}
inline std::string* ServerPublicKeyRegisterRequest::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerPublicKeyRegisterRequest.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerPublicKeyRegisterRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:network.ServerPublicKeyRegisterRequest.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerPublicKeyRegisterRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:network.ServerPublicKeyRegisterRequest.app_id)
}

// string server_id = 2;
inline void ServerPublicKeyRegisterRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerPublicKeyRegisterRequest::server_id() const {
  // @@protoc_insertion_point(field_get:network.ServerPublicKeyRegisterRequest.server_id)
  return server_id_.GetNoArena();
}
inline void ServerPublicKeyRegisterRequest::set_server_id(const std::string& value) {
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerPublicKeyRegisterRequest.server_id)
}
inline void ServerPublicKeyRegisterRequest::set_server_id(std::string&& value) {
  
  server_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerPublicKeyRegisterRequest.server_id)
}
inline void ServerPublicKeyRegisterRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerPublicKeyRegisterRequest.server_id)
}
inline void ServerPublicKeyRegisterRequest::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerPublicKeyRegisterRequest.server_id)
}
inline std::string* ServerPublicKeyRegisterRequest::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerPublicKeyRegisterRequest.server_id)
  return server_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerPublicKeyRegisterRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:network.ServerPublicKeyRegisterRequest.server_id)
  
  return server_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerPublicKeyRegisterRequest::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:network.ServerPublicKeyRegisterRequest.server_id)
}

// int32 public_key_length = 3;
inline void ServerPublicKeyRegisterRequest::clear_public_key_length() {
  public_key_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerPublicKeyRegisterRequest::public_key_length() const {
  // @@protoc_insertion_point(field_get:network.ServerPublicKeyRegisterRequest.public_key_length)
  return public_key_length_;
}
inline void ServerPublicKeyRegisterRequest::set_public_key_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  public_key_length_ = value;
  // @@protoc_insertion_point(field_set:network.ServerPublicKeyRegisterRequest.public_key_length)
}

// bytes public_key = 4;
inline void ServerPublicKeyRegisterRequest::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerPublicKeyRegisterRequest::public_key() const {
  // @@protoc_insertion_point(field_get:network.ServerPublicKeyRegisterRequest.public_key)
  return public_key_.GetNoArena();
}
inline void ServerPublicKeyRegisterRequest::set_public_key(const std::string& value) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerPublicKeyRegisterRequest.public_key)
}
inline void ServerPublicKeyRegisterRequest::set_public_key(std::string&& value) {
  
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerPublicKeyRegisterRequest.public_key)
}
inline void ServerPublicKeyRegisterRequest::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerPublicKeyRegisterRequest.public_key)
}
inline void ServerPublicKeyRegisterRequest::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerPublicKeyRegisterRequest.public_key)
}
inline std::string* ServerPublicKeyRegisterRequest::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerPublicKeyRegisterRequest.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerPublicKeyRegisterRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:network.ServerPublicKeyRegisterRequest.public_key)
  
  return public_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerPublicKeyRegisterRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:network.ServerPublicKeyRegisterRequest.public_key)
}

// bytes signature = 5;
inline void ServerPublicKeyRegisterRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerPublicKeyRegisterRequest::signature() const {
  // @@protoc_insertion_point(field_get:network.ServerPublicKeyRegisterRequest.signature)
  return signature_.GetNoArena();
}
inline void ServerPublicKeyRegisterRequest::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerPublicKeyRegisterRequest.signature)
}
inline void ServerPublicKeyRegisterRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerPublicKeyRegisterRequest.signature)
}
inline void ServerPublicKeyRegisterRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerPublicKeyRegisterRequest.signature)
}
inline void ServerPublicKeyRegisterRequest::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerPublicKeyRegisterRequest.signature)
}
inline std::string* ServerPublicKeyRegisterRequest::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerPublicKeyRegisterRequest.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerPublicKeyRegisterRequest::release_signature() {
  // @@protoc_insertion_point(field_release:network.ServerPublicKeyRegisterRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerPublicKeyRegisterRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:network.ServerPublicKeyRegisterRequest.signature)
}

// -------------------------------------------------------------------

// KeyNegotiationResponse

// int32 key_length = 1;
inline void KeyNegotiationResponse::clear_key_length() {
  key_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyNegotiationResponse::key_length() const {
  // @@protoc_insertion_point(field_get:network.KeyNegotiationResponse.key_length)
  return key_length_;
}
inline void KeyNegotiationResponse::set_key_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_length_ = value;
  // @@protoc_insertion_point(field_set:network.KeyNegotiationResponse.key_length)
}

// bytes key = 2;
inline void KeyNegotiationResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyNegotiationResponse::key() const {
  // @@protoc_insertion_point(field_get:network.KeyNegotiationResponse.key)
  return key_.GetNoArena();
}
inline void KeyNegotiationResponse::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.KeyNegotiationResponse.key)
}
inline void KeyNegotiationResponse::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.KeyNegotiationResponse.key)
}
inline void KeyNegotiationResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.KeyNegotiationResponse.key)
}
inline void KeyNegotiationResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.KeyNegotiationResponse.key)
}
inline std::string* KeyNegotiationResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:network.KeyNegotiationResponse.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyNegotiationResponse::release_key() {
  // @@protoc_insertion_point(field_release:network.KeyNegotiationResponse.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyNegotiationResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:network.KeyNegotiationResponse.key)
}

// -------------------------------------------------------------------

// ClientKeyNegotiationRequest

// string app_id = 1;
inline void ClientKeyNegotiationRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientKeyNegotiationRequest::app_id() const {
  // @@protoc_insertion_point(field_get:network.ClientKeyNegotiationRequest.app_id)
  return app_id_.GetNoArena();
}
inline void ClientKeyNegotiationRequest::set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientKeyNegotiationRequest.app_id)
}
inline void ClientKeyNegotiationRequest::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientKeyNegotiationRequest.app_id)
}
inline void ClientKeyNegotiationRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientKeyNegotiationRequest.app_id)
}
inline void ClientKeyNegotiationRequest::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientKeyNegotiationRequest.app_id)
}
inline std::string* ClientKeyNegotiationRequest::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientKeyNegotiationRequest.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientKeyNegotiationRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:network.ClientKeyNegotiationRequest.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientKeyNegotiationRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:network.ClientKeyNegotiationRequest.app_id)
}

// string user_id = 2;
inline void ClientKeyNegotiationRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClientKeyNegotiationRequest::user_id() const {
  // @@protoc_insertion_point(field_get:network.ClientKeyNegotiationRequest.user_id)
  return user_id_.GetNoArena();
}
inline void ClientKeyNegotiationRequest::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ClientKeyNegotiationRequest.user_id)
}
inline void ClientKeyNegotiationRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ClientKeyNegotiationRequest.user_id)
}
inline void ClientKeyNegotiationRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ClientKeyNegotiationRequest.user_id)
}
inline void ClientKeyNegotiationRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ClientKeyNegotiationRequest.user_id)
}
inline std::string* ClientKeyNegotiationRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ClientKeyNegotiationRequest.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientKeyNegotiationRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:network.ClientKeyNegotiationRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientKeyNegotiationRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:network.ClientKeyNegotiationRequest.user_id)
}

// -------------------------------------------------------------------

// ServerKeyNegotiationRequest

// string app_id = 1;
inline void ServerKeyNegotiationRequest::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerKeyNegotiationRequest::app_id() const {
  // @@protoc_insertion_point(field_get:network.ServerKeyNegotiationRequest.app_id)
  return app_id_.GetNoArena();
}
inline void ServerKeyNegotiationRequest::set_app_id(const std::string& value) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerKeyNegotiationRequest.app_id)
}
inline void ServerKeyNegotiationRequest::set_app_id(std::string&& value) {
  
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerKeyNegotiationRequest.app_id)
}
inline void ServerKeyNegotiationRequest::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerKeyNegotiationRequest.app_id)
}
inline void ServerKeyNegotiationRequest::set_app_id(const char* value, size_t size) {
  
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerKeyNegotiationRequest.app_id)
}
inline std::string* ServerKeyNegotiationRequest::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerKeyNegotiationRequest.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerKeyNegotiationRequest::release_app_id() {
  // @@protoc_insertion_point(field_release:network.ServerKeyNegotiationRequest.app_id)
  
  return app_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerKeyNegotiationRequest::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:network.ServerKeyNegotiationRequest.app_id)
}

// string server_id = 2;
inline void ServerKeyNegotiationRequest::clear_server_id() {
  server_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerKeyNegotiationRequest::server_id() const {
  // @@protoc_insertion_point(field_get:network.ServerKeyNegotiationRequest.server_id)
  return server_id_.GetNoArena();
}
inline void ServerKeyNegotiationRequest::set_server_id(const std::string& value) {
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerKeyNegotiationRequest.server_id)
}
inline void ServerKeyNegotiationRequest::set_server_id(std::string&& value) {
  
  server_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerKeyNegotiationRequest.server_id)
}
inline void ServerKeyNegotiationRequest::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerKeyNegotiationRequest.server_id)
}
inline void ServerKeyNegotiationRequest::set_server_id(const char* value, size_t size) {
  
  server_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerKeyNegotiationRequest.server_id)
}
inline std::string* ServerKeyNegotiationRequest::mutable_server_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerKeyNegotiationRequest.server_id)
  return server_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerKeyNegotiationRequest::release_server_id() {
  // @@protoc_insertion_point(field_release:network.ServerKeyNegotiationRequest.server_id)
  
  return server_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerKeyNegotiationRequest::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id);
  // @@protoc_insertion_point(field_set_allocated:network.ServerKeyNegotiationRequest.server_id)
}

// string user_id = 3;
inline void ServerKeyNegotiationRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerKeyNegotiationRequest::user_id() const {
  // @@protoc_insertion_point(field_get:network.ServerKeyNegotiationRequest.user_id)
  return user_id_.GetNoArena();
}
inline void ServerKeyNegotiationRequest::set_user_id(const std::string& value) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.ServerKeyNegotiationRequest.user_id)
}
inline void ServerKeyNegotiationRequest::set_user_id(std::string&& value) {
  
  user_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.ServerKeyNegotiationRequest.user_id)
}
inline void ServerKeyNegotiationRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.ServerKeyNegotiationRequest.user_id)
}
inline void ServerKeyNegotiationRequest::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.ServerKeyNegotiationRequest.user_id)
}
inline std::string* ServerKeyNegotiationRequest::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:network.ServerKeyNegotiationRequest.user_id)
  return user_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerKeyNegotiationRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:network.ServerKeyNegotiationRequest.user_id)
  
  return user_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerKeyNegotiationRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:network.ServerKeyNegotiationRequest.user_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
